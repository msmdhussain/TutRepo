Java Annotations
----------------
	Annotation is code about the code, that is metadata about the program itself. In other words, organized data about the code, embedded within the code itself. It can be parsed by the compiler, annotataion processing tools and can also be made available at runt-time too.

	We have baseic java comments infrastructure using which we add information about the code / logic so that in future, another programmer of the same programmer can understand the code in a better way. Javadoc is an additonal step over it, where we add information about the class, methods, variables in the source code. The way we need to add is organized using a syntax,Therefore, we can use a tool and parse those comments and prepare a javadoc document which can be distributed separately.

	Javadoc facility gives option for understanding the code in an external way, instead of opening the code the javadoc document can be used separately. IDE benefits using this javadoc as it is able to render information about the code as we develop. Annotations wer introduced in JDK 1.5

Uses of Annotaions
------------------
	Annotations are far more powerful thatn java comments and javadoc comments. One man difference with annotation is it can be carried over to runtime and the other two stops with compilation level. Annotations are not only comments, it brings in new possibilities in terms of automated processing. 

	In java we have been passing information to compiler for long. For example take serialization, we have the keyword transient to tell that this field is not serializable. Now instaead of have such keywords decorating an attribute annotations provide a generic way of adding information to class/method/field/variable. This is information is meant for programmers, automated tools, java compiler and runtime. Transient is a modifier and annotations are also a kind of modifiers.

	More thatn passing information, we can generate code using these annotations. Take webservices where we need to adhere by the service interface contract. The skeleton can be generated using annotations automatically by the service interface contract. The skeleton can be generated using annotations automatically by a annotation parse. This avoids human errors and decreases development time as always with automation.

	Frameworks like Hibernate, Spring Axis make heavy use of annotations. When a language need to be made popular one of the best thing to do is support development of frameworks based on the language. Annotation is a good step towards that and will help grow Java.


When Not to Use Annotations
---------------------------
	Do not over use annotations as it will pollute the ocde.
	It is better not to try to change the behaviour of objects using annotations. There is sufficient constructs available in oops and annotation is not a better mechanism to deal with it.
	We should not what we are parsing. Do not try to over generalize as ti may complicated the underlying code. Code is the real program and annotation is meta.
	Avoid using annotation to specify environment/ application/ database related information.
	

Annotation Structure
--------------------

	There are two main components in annotations. First is annotation type and the next is the annotation itself which we use in the code to add meaning. Every annotation belongs to a annotation type.

Annotation type:

@interface <annotation-type-name> {
method declaration;
}

Annotation type is very similar to an interface with little difference.

We attach '@' just before interfce keyword.
Methods will not have parameters.
Methods will not have throws clause.
Method return types are restricted to primitives, String, Class, enums, annotations and arrays of the preceding types.
We can assign a default value to method.


Meta Annotaitons
----------------

	Annotations itself is meta information then what is meta annotations? As you have rightly guessed, it is information about annotation. When we annotate a annotation type then it is called meta annotation. When we annotate a annotation type then it is called ameta annotation. For example, we say that this annotation can be used only for methods.

@Target(ElementyType.METOD)
public @interface MethodInfo { }

Annotation Types
----------------
	1.Documented 
	  When a annotation type is annotated with @Documented then wherever this annotation is used those elements should be documented using Javadoc tool.
	

	2.Inherited
	  This meta annotation denotes that the annotation type can be inherited from super class. When a class is annotated with annotation of type that is annotated with Inherited, then its super class will be queired till a matching annotation is found.

	3.Retention 
	  This meta annotation denotes the level till which this annotation will be carried. When an annotation type is annotated with meta annotation Retention, RetentionPolicy has three possible values:
	  @Retention(RetentionPolicy.RUNTIME)
	  public @interface Developer { String value(); }

		1. Class
		 When the annotation value is given as 'class' then this annotation will be compiled and included in the class file.

		2. Runtime
		 The value name itself says, when the retion values is 'Runtiome' this annotation will be available in JVM at runtime. We can write custom code using reflection package and parese the annotation.


		3. Source
		  This annotation will be removed at compile time and will not be available at compiled class.

	 4.Target

		This meta annotation says that this annotation type is applicable for only the element(ElementType) listed. Possible values for ElementType are, CONSTRUCTOR, FIELD, LOCAL_VARIABLE, METHOD, PACKAGE, PARAMETER, TYPE.

  @Target(ElementType.FIELD)
   public @interface fieldInfo { }


Build-in Java Annotations
-------------------------

@Dcoumented, @Inherited, @Retention and @Target are the four available meta annotations that are build-in with Java.

Apart from these meta annotations we have the following annotations.

@Override

	When we want to overrride a method, we can use this annotation to say to the compiler we are overriding an existing method. If the compiler finds that there is no matching method found in super class then generates a warning. This is not mandatory to use @Override when we override a method.Eclipse IDE automatically adding this @Override annotation. though it is not mandatory, is is considedred as a best practice.

@Deprecated 
	When we want to inform the compiler that a method is deprecated we can use this. So, when a method is annotated with @Deprecated and that method is found used in some place, then the compiler generates a warning.

@SuppressWarnings
	This is like saying, "I know what I am doing, so please shut up!" We want the compiler not to raise andy warnings and then we use this annotation.



Cutstom Annotations
-------------------
	We can create our own annotations and use it. We need to declare a annotation type and then use the respective annotation is java classes.

	Fllowing is an exaple of cutom annotation, where this annotation can be used on any element by given values. Note that @Documented meta-annotation here to say that this annotation should be pared by javadoc.


@Documented
public @interface Team{
int teamId();
String teamName();
String teamLead() default "[unassigned]";
String writeDate() default "[unimplemented]";
}


Annotation for the Above Example Type

@Team(teamId=73,teamName="TEST",teamLead="TESTLead",witedDate="10/10/86")
public static void readCSV(File inputFile){...}



Marker Annotations
------------------
We know what a marker interface is. Marker annotations are similar to marker interface, yes they don't have methods/elemts.

public @interface SuperTeam{}


@SuperTeam public static void readCSV(File fileInput){...}

In the above see how this annotation is used. It will look like one of the modifiers for this method and also note that the parenthesis () from annotation type is omitted. As there are no elements for this annotation, the parenthesis can be optionally omitted.

Single Value Annotations
------------------------

 There is a change that an anootation can have only one element. In such a case that element should be named value.

public @interface Developer{
String value();
}

@Developer("popeye")
public static void read CSV(File input){..}






			    





